module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var fileStorage_1 = __webpack_require__(1);
	var redisStorage_1 = __webpack_require__(7);
	module.exports = (function () {
	    function CacheEngine(storageConfig, cacheRules) {
	        this.storageConfig = storageConfig;
	        this.cacheRules = cacheRules;
	    }
	    CacheEngine.prototype.url = function (url) {
	        switch (this.storageConfig.type) {
	            case 'file':
	                return new fileStorage_1.default(url, this.storageConfig, this.cacheRules);
	            case 'redis':
	                return new redisStorage_1.default(url, this.storageConfig, this.cacheRules);
	            default:
	                throw new Error('Unknown Storage config type value. Only file|redis allowed');
	        }
	    };
	    return CacheEngine;
	}());


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_1 = __webpack_require__(2);
	var path = __webpack_require__(3);
	var fs = __webpack_require__(4);
	var shell = __webpack_require__(5);
	var es6_promise_1 = __webpack_require__(6);
	es6_promise_1.polyfill();
	var FileStorage = (function (_super) {
	    __extends(FileStorage, _super);
	    function FileStorage(_url, _storageConfig, _regexRules) {
	        var _this = this;
	        _super.call(this, _url, _regexRules);
	        this._url = _url;
	        this._storageConfig = _storageConfig;
	        this._regexRules = _regexRules;
	        this.escape = function () {
	            var escaped = _this._url.replace(':', '%3A');
	            escaped = escaped.replace('.', '%2E'); //http://stackoverflow.com/questions/3856693/a-url-resource-that-is-a-dot-2e
	            escaped = escaped.replace('~', '%7E'); //http://www.w3schools.com/tags/ref_urlencode.asp
	            escaped = encodeURIComponent(escaped);
	            return escaped;
	        };
	        this.validate = function (str) {
	            if (str.length === 0) {
	                return false;
	            }
	            if (str.length > 255) {
	                return false;
	            }
	            if (typeof str === 'undefined') {
	                return false;
	            }
	            return true;
	        };
	        this.isCached = function () {
	            return new Promise(function (resolve, reject) {
	                if (fs.existsSync(_this._currentFilePath)) {
	                    if (_this._currentCategory === 'maxAge') {
	                        var stats = fs.statSync(_this._currentFilePath);
	                        var nowTimestamp = new Date().getTime();
	                        var modificationTime = stats.mtime.getTime();
	                        var expiration = modificationTime + _this._currentMaxAge * 1000;
	                        var diff = (nowTimestamp - expiration);
	                        _this.diff = diff;
	                        if (diff > 0) {
	                            //the file is expired, remove it, then return false;
	                            _this.removeUrl();
	                            resolve(false);
	                        }
	                        else {
	                            resolve(true);
	                        }
	                    }
	                    resolve(true);
	                }
	                else {
	                    resolve(false);
	                }
	            });
	        };
	        this.removeUrl = function () {
	            return new Promise(function (resolve, reject) {
	                try {
	                    fs.unlinkSync(_this._currentFilePath);
	                    resolve(true);
	                }
	                catch (e) {
	                    reject(false);
	                }
	            });
	        };
	        this.getUrl = function () {
	            return new Promise(function (resolve, reject) {
	                _this.isCached().then(function (isCached) {
	                    if (!isCached) {
	                        reject('This url is not cached: ' + _this._url);
	                    }
	                    else {
	                        resolve(fs.readFileSync(_this._currentFilePath, 'utf8'));
	                    }
	                });
	            });
	        };
	        this.cache = function (html, force) {
	            return new Promise(function (resolve, reject) {
	                if (!_this._validFile) {
	                    console.log('FILE -> ' + 'invalid REJECTED');
	                    reject('invalid URL');
	                    return;
	                }
	                else {
	                    if (force === true) {
	                        fs.writeFile(_this._currentFilePath, html, 'utf8', function (err) {
	                            if (err) {
	                                console.error(err);
	                                reject('invalid URL');
	                            }
	                            else {
	                                resolve(true);
	                            }
	                        });
	                        return;
	                    }
	                    _this.isCached().then(function (isCached) {
	                        if (isCached) {
	                            resolve(false);
	                        }
	                        else {
	                            if (_this._currentCategory === 'never') {
	                                console.log('FILE -> ' + 'NEVER = resolved');
	                                resolve(false);
	                                return;
	                            }
	                            fs.writeFile(_this._currentFilePath, html, 'utf8', function (err) {
	                                if (err) {
	                                    console.error(err);
	                                    console.log('FILE -> ' + err);
	                                    reject('invalid URL');
	                                }
	                                else {
	                                    resolve(true);
	                                }
	                            });
	                        }
	                    });
	                }
	            });
	        };
	        shell.mkdir('-p', this._storageConfig.dir);
	        var escaped = this.escape();
	        this._validFile = this.validate(escaped);
	        this._currentFilePath = path.join(this._storageConfig.dir, escaped);
	    }
	    return FileStorage;
	}(abstract_1.CacheCategory));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FileStorage;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	var CacheCategory = (function () {
	    function CacheCategory(currentUrl, _config) {
	        var _this = this;
	        this.currentUrl = currentUrl;
	        this._config = _config;
	        this.getRegexTest = function (u) {
	            return u.regex.test(_this.currentUrl);
	        };
	        //return always|never|maxAge|timestamp|default
	        this.getCacheCategory = function () {
	            var i;
	            for (i in _this._config.cacheNever) {
	                if (_this.getRegexTest(_this._config.cacheNever[i]) === true) {
	                    _this._currentCategory = 'never';
	                    return;
	                }
	            }
	            for (i in _this._config.cacheAlways) {
	                if (_this.getRegexTest(_this._config.cacheAlways[i]) === true) {
	                    _this._currentCategory = 'always';
	                    return true;
	                }
	            }
	            for (i in _this._config.cacheMaxAge) {
	                if (_this.getRegexTest(_this._config.cacheMaxAge[i]) === true) {
	                    _this._currentCategory = 'maxAge';
	                    _this._currentMaxAge = _this._config.cacheMaxAge[i].maxAge;
	                    return true;
	                }
	            }
	            _this._currentCategory = _this._config.default;
	        };
	        this.getCacheCategory();
	    }
	    CacheCategory.prototype.getCategory = function () {
	        return this._currentCategory;
	    };
	    CacheCategory.prototype.getCurrentUrl = function () {
	        return this.currentUrl;
	    };
	    return CacheCategory;
	}());
	exports.CacheCategory = CacheCategory;


/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("fs");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("shelljs");

/***/ },
/* 6 */
/***/ function(module, exports) {

	module.exports = require("es6-promise");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var abstract_1 = __webpack_require__(2);
	var redisPool_1 = __webpack_require__(8);
	var es6_promise_1 = __webpack_require__(6);
	es6_promise_1.polyfill();
	var RedisStorage = (function (_super) {
	    __extends(RedisStorage, _super);
	    function RedisStorage(_url, _storageConfig, _regexRules) {
	        var _this = this;
	        _super.call(this, _url, _regexRules);
	        this._url = _url;
	        this._storageConfig = _storageConfig;
	        this._regexRules = _regexRules;
	        this.isRedisOnline = function () {
	            return _this._redisOnline;
	        };
	        this.isCached = function () {
	            return new Promise(function (resolve, reject) {
	                _this._redisConnection.get(_this._url, function (err, data) {
	                    if (err) {
	                        console.error(err);
	                        reject(err);
	                    }
	                    else {
	                        var isCached = data !== null;
	                        resolve(isCached);
	                    }
	                });
	            });
	        };
	        this.removeUrl = function () {
	            return new Promise(function (resolve, reject) {
	                _this._redisConnection.del(_this._url, function (err, data) {
	                    if (err) {
	                        console.error(err);
	                        reject(err);
	                    }
	                    resolve(true);
	                });
	            });
	        };
	        this.getUrl = function () {
	            return new Promise(function (resolve, reject) {
	                _this._redisConnection.get(_this._url, function (err, data) {
	                    if (err) {
	                        console.error(err);
	                        reject(err);
	                    }
	                    if (data === null) {
	                        reject('This url is not cached: ' + _this._url);
	                    }
	                    else {
	                        resolve(data);
	                    }
	                });
	            });
	        };
	        this.cache = function (html, force) {
	            return new Promise(function (resolve, reject) {
	                if (force === true) {
	                    _this._redisConnection.set(_this._url, html, function (err, result) {
	                        if (err) {
	                            console.error(err);
	                            reject(err);
	                        }
	                        if (_this._currentCategory === 'maxAge') {
	                            _this._redisConnection.expires(_this._url, _this._currentMaxAge, function (err) {
	                                if (err) {
	                                    console.error(err);
	                                    reject(err);
	                                }
	                                else {
	                                    resolve(true);
	                                }
	                            });
	                        }
	                        else {
	                            resolve(true);
	                        }
	                    });
	                }
	                else {
	                    _this.isCached().then(function (isCached) {
	                        if (isCached === true) {
	                            resolve(false);
	                        }
	                        else if (_this._currentCategory === 'never') {
	                            resolve(false);
	                        }
	                        else {
	                            _this._redisConnection.set(_this._url, html, function (err, result) {
	                                if (err) {
	                                    console.error(err);
	                                    reject(err);
	                                }
	                                if (_this._currentCategory === 'maxAge') {
	                                    _this._redisConnection.expire(_this._url, _this._currentMaxAge, function (err) {
	                                        if (err) {
	                                            console.error(err);
	                                            reject(err);
	                                        }
	                                        else {
	                                            resolve(true);
	                                        }
	                                    });
	                                }
	                                else {
	                                    resolve(true);
	                                }
	                            });
	                        }
	                    });
	                }
	            });
	        };
	        this._redisOnline = false;
	        this._redisConnection = redisPool_1.redis_connection('CACHE', this._storageConfig);
	        this._redisConnection.on('connect', function () {
	            _this._redisOnline = true;
	            console.log('REDIS CONNECTED');
	        });
	        console.log('RedisStorage called ONCE');
	    }
	    return RedisStorage;
	}(abstract_1.CacheCategory));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RedisStorage;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var redis = __webpack_require__(9);
	var CON = {}; // store redis connections as Object
	var new_connection = function (config) {
	    var redis_con = redis.createClient(config);
	    redis_con.auth(config.auth);
	    redis_con.on('error', function (e) {
	        console.error(e);
	        throw new Error(e);
	    });
	    return redis_con;
	};
	exports.redis_connection = function (type, config) {
	    type = type || 'DEFAULT'; // allow infinite types of connections
	    if (!CON[type] || !CON[type].connected) {
	        CON[type] = new_connection(config);
	    }
	    return CON[type];
	};
	exports.kill = function (type) {
	    type = type || 'DEFAULT'; // kill specific connection or default one
	    CON[type].end();
	    delete CON[type];
	};
	exports.killall = function () {
	    var keys = Object.keys(CON);
	    keys.forEach(function (k) {
	        CON[k].end();
	        delete CON[k];
	    });
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = require("redis");

/***/ }
/******/ ]);
//# sourceMappingURL=simple-cache.min.js.map