module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var storage_1 = __webpack_require__(1);
	var storage_2 = __webpack_require__(6);
	var es6_promise_1 = __webpack_require__(4);
	var instance_1 = __webpack_require__(7);
	var instance_2 = __webpack_require__(10);
	var nodeurl = __webpack_require__(13);
	var Helpers_1 = __webpack_require__(9);
	var dbug = __webpack_require__(5);
	var debug = dbug('simple-url-cache');
	var CacheEngine = (function () {
	    function CacheEngine(defaultDomain, instanceName, storageConfig, cacheRules) {
	        this.defaultDomain = defaultDomain;
	        this.instanceName = instanceName;
	        this.storageConfig = storageConfig;
	        this.cacheRules = cacheRules;
	        Helpers_1.default.CheckType(defaultDomain, 'string');
	        Helpers_1.default.CheckType(instanceName, 'string');
	        try {
	            Helpers_1.default.IsSet('cacheRules', cacheRules);
	            Helpers_1.default.CheckType(cacheRules.default, 'string');
	            Helpers_1.default.CheckType(cacheRules.cacheAlways, Array);
	            Helpers_1.default.CheckType(cacheRules.cacheNever, Array);
	            Helpers_1.default.CheckType(cacheRules.cacheMaxAge, Array);
	            cacheRules.cacheAlways.forEach(function (rule) {
	                Helpers_1.default.CheckType(rule.regex, RegExp);
	            });
	            cacheRules.cacheNever.forEach(function (rule) {
	                Helpers_1.default.CheckType(rule.regex, RegExp);
	            });
	            cacheRules.cacheMaxAge.forEach(function (rule) {
	                Helpers_1.default.CheckType(rule.regex, RegExp);
	                Helpers_1.default.CheckType(rule.maxAge, 'number');
	            });
	        }
	        catch (e) {
	            Helpers_1.default.Error('The cacheRules is invalid', cacheRules);
	        }
	        if (this.isFS(storageConfig)) {
	            this.type = 'file';
	        }
	        else {
	            this.type = 'redis';
	        }
	        if (typeof CacheEngine.pool[this.type] === 'undefined') {
	            CacheEngine.pool[this.type] = {};
	        }
	        if (typeof CacheEngine.pool[this.type][instanceName] === 'undefined') {
	            CacheEngine.pool[this.type][instanceName] = {};
	        }
	    }
	    CacheEngine.prototype.isFS = function (storageConfig) {
	        return typeof storageConfig.dir !== 'undefined';
	    };
	    CacheEngine.prototype.getInstance = function (domain) {
	        if (typeof CacheEngine.pool[this.type][this.instanceName] === 'undefined') {
	            CacheEngine.pool[this.type][this.instanceName] = {};
	        }
	        if (typeof CacheEngine.pool[this.type][this.instanceName][domain] === 'undefined') {
	            if (this.isFS(this.storageConfig)) {
	                CacheEngine.pool[this.type][this.instanceName][domain] = new instance_1.default(domain, this.instanceName, this.storageConfig, this.cacheRules);
	            }
	            else {
	                CacheEngine.pool[this.type][this.instanceName][domain] = new instance_2.default(domain, this.instanceName, this.storageConfig, this.cacheRules);
	            }
	        }
	        return CacheEngine.pool[this.type][this.instanceName][domain];
	    };
	    CacheEngine.prototype.clearAllDomains = function () {
	        var _this = this;
	        var instance = this.getInstance(this.defaultDomain);
	        var tmpInstance;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            instance.getAllCachedDomains().then(function (domains) {
	                if (domains.length === 0) {
	                    resolve(true);
	                }
	                var nb = 0;
	                domains.forEach(function (domain) {
	                    tmpInstance = _this.getInstance(domain);
	                    tmpInstance.clearAllCache().then(function () {
	                        nb++;
	                        if (nb === domains.length) {
	                            resolve(true);
	                        }
	                    }, function (err) {
	                        reject(err);
	                    });
	                });
	            }, function (err) {
	                reject(err);
	            });
	        });
	    };
	    CacheEngine.prototype.clearDomain = function (domain) {
	        if (typeof domain === 'undefined') {
	            domain = this.defaultDomain;
	        }
	        return this.getInstance(domain).clearAllCache();
	    };
	    CacheEngine.prototype.getCachedDomains = function () {
	        var instance = this.getInstance(this.defaultDomain);
	        return instance.getAllCachedDomains();
	    };
	    CacheEngine.prototype.getCachedURLs = function (domain) {
	        if (typeof domain === 'undefined') {
	            domain = this.defaultDomain;
	        }
	        var instance = this.getInstance(domain);
	        return instance.getCachedURLs();
	    };
	    CacheEngine.prototype.getAllCachedURLs = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var urls = {};
	            _this.getCachedDomains().then(function (domains) {
	                var nb = 0;
	                if (domains.length === 0) {
	                    resolve({});
	                }
	                domains.forEach(function (domain) {
	                    urls[domain] = [];
	                    _this.getCachedURLs(domain).then(function (result) {
	                        urls[domain] = result;
	                        nb++;
	                        debug(nb, domains.length);
	                        if (nb === domains.length) {
	                            console.log('resolving ', nb);
	                            resolve(urls);
	                        }
	                    }, function (err) {
	                        reject(err);
	                    });
	                });
	            }, function (err) {
	                reject(err);
	            });
	        });
	    };
	    CacheEngine.prototype.url = function (url) {
	        var instance;
	        var parsedURL = nodeurl.parse(url);
	        var relativeURL = parsedURL.path;
	        if (!/\//.test(relativeURL)) {
	            relativeURL = '/' + relativeURL;
	        }
	        parsedURL.pathname = null;
	        parsedURL.path = null;
	        parsedURL.hash = null;
	        parsedURL.query = null;
	        parsedURL.search = null;
	        var domain = nodeurl.format(parsedURL);
	        if (domain === relativeURL) {
	            throw new Error('The url ' + url + ' is not valid');
	        }
	        if (domain.length === 0) {
	            debug('This url', url, ' has no domain, using defaultDomain = ', this.defaultDomain);
	            instance = this.getInstance(this.defaultDomain);
	        }
	        else {
	            debug('This URL ', url, ' has a domain: ', domain);
	            instance = this.getInstance(domain);
	        }
	        if (instance instanceof instance_1.default) {
	            return new storage_1.default(relativeURL, instance);
	        }
	        else if (instance instanceof instance_2.default) {
	            return new storage_2.default(relativeURL, instance);
	        }
	    };
	    CacheEngine.pool = {};
	    return CacheEngine;
	}());
	;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = CacheEngine;
	module.exports = CacheEngine;


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var cache_1 = __webpack_require__(2);
	var fs = __webpack_require__(3);
	var es6_promise_1 = __webpack_require__(4);
	var dbug = __webpack_require__(5);
	var debug = dbug('simple-url-cache-FS');
	var FileStorage = (function (_super) {
	    __extends(FileStorage, _super);
	    function FileStorage(_url, storageInstance) {
	        var _this = this;
	        _super.call(this, storageInstance, _url);
	        this._url = _url;
	        this.delete = function () {
	            return _this.getStorageInstance().delete(_this._currentFilePath);
	        };
	        this.get = function () {
	            return _this.getStorageInstance().get(_this._currentFilePath);
	        };
	        this.has = function () {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                _this.getStorageInstance().has(_this._currentFilePath).then(function (exists) {
	                    if (exists) {
	                        if (_this._currentCategory === 'maxAge') {
	                            var stats = fs.statSync(_this._currentFilePath);
	                            var nowTimestamp = new Date().getTime();
	                            var modificationTime = stats.mtime.getTime();
	                            var expiration = modificationTime + _this._currentMaxAge * 1000;
	                            var diff = (nowTimestamp - expiration);
	                            _this.diff = diff;
	                            if (diff > 0) {
	                                debug('This url is expired.... removing the cache. ', _this._currentFilePath);
	                                _this.getStorageInstance().delete(_this._currentFilePath).then(function (ok) {
	                                    resolve(false);
	                                }, function (err) {
	                                    reject(err);
	                                });
	                            }
	                            else {
	                                debug('This url is cached.', _this._currentFilePath);
	                                resolve(true);
	                            }
	                        }
	                        else {
	                            debug('This url is cached ', _this._currentFilePath);
	                            resolve(true);
	                        }
	                    }
	                    else {
	                        resolve(false);
	                    }
	                }, function (e) {
	                    reject(e);
	                });
	            });
	        };
	        this.set = function (html, force) {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                if (force === true) {
	                    _this.getStorageInstance().set(_this._currentFilePath, html).then(function () {
	                        resolve(true);
	                    }, function (err) {
	                        reject(err);
	                    });
	                    return;
	                }
	                if (_this._currentCategory === 'never') {
	                    debug('this url should never been stored');
	                    resolve(false);
	                    return;
	                }
	                _this.getStorageInstance().has(_this._currentFilePath).then(function (has) {
	                    if (has) {
	                        resolve(false);
	                    }
	                    _this.getStorageInstance().set(_this._currentFilePath, html).then(function (result) {
	                        resolve(result);
	                    }, function (err) {
	                        reject(err);
	                    });
	                }, function (err) {
	                    reject(err);
	                });
	            });
	        };
	        this._currentFilePath = storageInstance.getFilePath(this._url);
	    }
	    return FileStorage;
	}(cache_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FileStorage;


/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	var Cache = (function () {
	    function Cache(_storageInstance, currentUrl) {
	        var _this = this;
	        this._storageInstance = _storageInstance;
	        this.currentUrl = currentUrl;
	        this.getRegexTest = function (u) {
	            return u.regex.test(_this.currentUrl);
	        };
	        this.getCacheCategory = function () {
	            var i;
	            for (i in _this._config.cacheNever) {
	                if (_this.getRegexTest(_this._config.cacheNever[i]) === true) {
	                    _this._currentCategory = 'never';
	                    return;
	                }
	            }
	            for (i in _this._config.cacheAlways) {
	                if (_this.getRegexTest(_this._config.cacheAlways[i]) === true) {
	                    _this._currentCategory = 'always';
	                    return;
	                }
	            }
	            for (i in _this._config.cacheMaxAge) {
	                if (_this.getRegexTest(_this._config.cacheMaxAge[i]) === true) {
	                    _this._currentCategory = 'maxAge';
	                    _this._currentMaxAge = _this._config.cacheMaxAge[i].maxAge;
	                    return;
	                }
	            }
	            _this._currentCategory = _this._config.default;
	            return;
	        };
	        this._config = this._storageInstance.getCacheRules();
	        this.getCacheCategory();
	    }
	    Cache.prototype.getCategory = function () {
	        return this._currentCategory;
	    };
	    Cache.prototype.getCurrentUrl = function () {
	        return this.currentUrl;
	    };
	    Cache.prototype.getStorageInstance = function () {
	        return this._storageInstance;
	    };
	    return Cache;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Cache;


/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = require("fs-extra");

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = require("es6-promise");

/***/ },
/* 5 */
/***/ function(module, exports) {

	module.exports = require("debug");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var cache_1 = __webpack_require__(2);
	var es6_promise_1 = __webpack_require__(4);
	var dbug = __webpack_require__(5);
	var debug = dbug('simple-url-cache-REDIS');
	var RedisStorage = (function (_super) {
	    __extends(RedisStorage, _super);
	    function RedisStorage(_url, storageInstance) {
	        var _this = this;
	        _super.call(this, storageInstance, _url);
	        this._url = _url;
	        this.delete = function () {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                _this.has().then(function (isCached) {
	                    if (!isCached) {
	                        reject();
	                    }
	                    else {
	                        _this.getStorageInstance().delete(_this._url).then(function () {
	                            resolve(true);
	                        }, function (err) {
	                            reject(err);
	                        });
	                    }
	                }, function (err) {
	                    reject(err);
	                });
	            });
	        };
	        this.has = function () {
	            return _this.getStorageInstance().has(_this._url);
	        };
	        this.get = function () {
	            return _this.getStorageInstance().get(_this._url);
	        };
	        this.set = function (html, force) {
	            return new es6_promise_1.Promise(function (resolve, reject) {
	                if (force === true) {
	                    var ttl = 0;
	                    if (_this._currentCategory === 'maxAge') {
	                        ttl = _this._currentMaxAge;
	                    }
	                    _this.getStorageInstance().set(_this._url, html, ttl).then(function (result) {
	                        resolve(result);
	                    }, function (err) {
	                        reject(err);
	                    });
	                    return;
	                }
	                if (_this._currentCategory === 'never') {
	                    debug('this url should never been stored');
	                    resolve(false);
	                    return;
	                }
	                _this.getStorageInstance().has(_this._url).then(function (has) {
	                    if (has === true) {
	                        debug('This url is already cached - not storing it: ', _this._url);
	                        resolve(false);
	                    }
	                    else {
	                        var ttl = 0;
	                        if (_this._currentCategory === 'maxAge') {
	                            ttl = _this._currentMaxAge;
	                        }
	                        _this.getStorageInstance().set(_this._url, html, ttl).then(function (result) {
	                            resolve(result);
	                        }, function (err) {
	                            reject(err);
	                        });
	                    }
	                }, function (err) {
	                    reject(err);
	                });
	            });
	        };
	        debug('RedisStorage instanciated with url: ' + this._url);
	    }
	    return RedisStorage;
	}(cache_1.default));
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RedisStorage;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var es6_promise_1 = __webpack_require__(4);
	var fs = __webpack_require__(3);
	var path = __webpack_require__(8);
	var debg = __webpack_require__(5);
	var Helpers_1 = __webpack_require__(9);
	var debug = debg('simple-url-cache-FS');
	var FileStorageInstance = (function () {
	    function FileStorageInstance(domain, instanceName, config, rules) {
	        this.domain = domain;
	        this.instanceName = instanceName;
	        this.config = config;
	        this.rules = rules;
	        debug('Creating a new FileStorage Instance with domain, instancename and path ', domain, instanceName);
	        Helpers_1.default.CheckType(domain, 'string');
	        Helpers_1.default.CheckType(instanceName, 'string');
	        this.baseDir = path.resolve(path.join(this.config.dir, this.escape(this.instanceName), this.escape(this.domain)));
	        debug(this.baseDir);
	        fs.ensureDirSync(this.baseDir);
	    }
	    FileStorageInstance.prototype.escape = function (key) {
	        var escaped = key.replace(':', '%3A');
	        escaped = escaped.replace('.', '%2E');
	        escaped = escaped.replace('~', '%7E');
	        escaped = encodeURIComponent(escaped);
	        return escaped;
	    };
	    ;
	    FileStorageInstance.prototype.unescape = function (key) {
	        var unescaped = decodeURIComponent(key);
	        unescaped = unescaped.replace('%3A', ':');
	        unescaped = unescaped.replace('%2E', '.');
	        unescaped = unescaped.replace('%7E', '~');
	        return unescaped;
	    };
	    FileStorageInstance.prototype.validate = function (key) {
	        if (key.length === 0) {
	            return false;
	        }
	        if (key.length > 255) {
	            return false;
	        }
	        if (typeof key === 'undefined') {
	            return false;
	        }
	        return true;
	    };
	    ;
	    FileStorageInstance.prototype.clearAllCache = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            try {
	                if (!fs.existsSync(_this.baseDir)) {
	                    resolve(true);
	                }
	                fs.removeSync(_this.baseDir);
	                resolve(true);
	            }
	            catch (e) {
	                debug('error while emptying directory', _this.baseDir, e);
	                reject(e);
	            }
	        });
	    };
	    FileStorageInstance.prototype.delete = function (key) {
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            try {
	                fs.unlinkSync(key);
	                resolve(true);
	            }
	            catch (e) {
	                reject(e);
	            }
	        });
	    };
	    FileStorageInstance.prototype.destroy = function () { };
	    FileStorageInstance.prototype.get = function (key) {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            _this.has(key).then(function (isCached) {
	                if (!isCached) {
	                    reject();
	                }
	                else {
	                    resolve(fs.readFileSync(key, 'utf8'));
	                }
	            });
	        });
	    };
	    ;
	    FileStorageInstance.prototype.getAllCachedDomains = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            try {
	                if (!fs.existsSync(_this.baseDir)) {
	                    resolve([]);
	                }
	                var list = fs.readdirSync(path.resolve(path.join(_this.config.dir, _this.escape(_this.instanceName))));
	                if (list.length === 0) {
	                    ;
	                    resolve([]);
	                }
	                debug('list = ', list);
	                var results_1 = [];
	                list.forEach(function (dir) {
	                    results_1.push(_this.unescape(dir));
	                });
	                resolve(results_1);
	            }
	            catch (e) {
	                debug('Error while reading dir', _this.config.dir);
	                reject(e);
	            }
	        });
	    };
	    FileStorageInstance.prototype.getCachedURLs = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            try {
	                if (!fs.existsSync(_this.baseDir)) {
	                    resolve([]);
	                }
	                var list = fs.readdirSync(_this.baseDir);
	                for (var i in list) {
	                    list[i] = _this.unescape(list[i]);
	                }
	                resolve(list);
	            }
	            catch (e) {
	                debug('Error while reading dir', _this.baseDir);
	                reject(e);
	            }
	        });
	    };
	    FileStorageInstance.prototype.getFilePath = function (url) {
	        var file = this.escape(url);
	        if (this.validate(file)) {
	            return path.join(this.baseDir, file);
	        }
	        throw new Error('Invalid file');
	    };
	    FileStorageInstance.prototype.getCacheRules = function () {
	        return this.rules;
	    };
	    FileStorageInstance.prototype.has = function (key) {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            try {
	                if (!fs.existsSync(_this.baseDir)) {
	                    resolve(false);
	                }
	                var exist = fs.existsSync(key);
	                resolve(exist);
	            }
	            catch (e) {
	                debug(e);
	                reject(e);
	            }
	        });
	    };
	    FileStorageInstance.prototype.set = function (key, value) {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            try {
	                fs.ensureDirSync(_this.baseDir);
	                fs.writeFileSync(key, value, 'utf-8');
	                resolve(true);
	            }
	            catch (e) {
	                debug(e);
	                reject(e);
	            }
	        });
	    };
	    return FileStorageInstance;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = FileStorageInstance;


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = require("path");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var debug = __webpack_require__(5)('simple-url-cache');
	var Helpers = (function () {
	    function Helpers() {
	    }
	    Helpers.SameRegex = function (r1, r2) {
	        debug('checking if rules are the same', r1, r2);
	        if (r1 instanceof RegExp && r2 instanceof RegExp) {
	            var props = ["global", "multiline", "ignoreCase", "source"];
	            for (var i = 0; i < props.length; i++) {
	                var prop = props[i];
	                if (r1[prop] !== r2[prop]) {
	                    debug('props diff', prop, r1[prop], r2[prop]);
	                    return false;
	                }
	            }
	            return true;
	        }
	        return false;
	    };
	    Helpers.IsSet = function (name, input) {
	        if (typeof input === 'undefined' && input !== null && input !== '') {
	            Helpers.Error(name, 'is not set');
	        }
	    };
	    Helpers.CheckType = function (input, type) {
	        if (typeof input === 'object' && type === 'object') {
	            return;
	        }
	        if (typeof input === 'object') {
	            if (typeof type === 'string' && input.constructor !== type) {
	                Helpers.Error('This input is not a valid', type, input, ' type is', input);
	            }
	            else if (typeof type === 'array') {
	                var valid = false;
	                type.forEach(function (item) {
	                    if (input.constructor === item) {
	                        valid = true;
	                    }
	                });
	                if (!valid) {
	                    Helpers.Error(input, 'Doesn\'t match any of these types', type, ' got ', input.constructor);
	                }
	            }
	        }
	        else {
	            if (typeof type === 'string' && typeof input !== type) {
	                Helpers.Error('This input is not a valid', type, input, ' type is', typeof input);
	            }
	            else if (typeof type === 'array') {
	                var valid = false;
	                type.forEach(function (item) {
	                    if (typeof input === item) {
	                        valid = true;
	                    }
	                });
	                if (!valid) {
	                    Helpers.Error(input, 'Doesn\'t match any of these types', type, ' got ', typeof input);
	                }
	            }
	        }
	    };
	    Helpers.StringIn = function (input, validValues) {
	        Helpers.CheckType(input, 'string');
	        if (validValues.length === 0) {
	            return;
	        }
	        var valid = false;
	        validValues.forEach(function (item) {
	            if (item === input) {
	                valid = true;
	            }
	        });
	        if (!valid) {
	            Helpers.Error(input, 'should match', validValues);
	        }
	    };
	    Helpers.RegexNotIn = function (regex, regexes, desc) {
	        if (regexes.length === 0) {
	            return;
	        }
	        Helpers.CheckType(regex, RegExp);
	        regexes.forEach(function (item) {
	            if (Helpers.SameRegex(item, regex)) {
	                Helpers.Error(item, ' Is already defined ', desc);
	            }
	        });
	    };
	    Helpers.Error = function () {
	        var data = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            data[_i - 0] = arguments[_i];
	        }
	        var str = [];
	        for (var i in data) {
	            if (typeof data[i].toString === 'function') {
	                str.push(data[i].toString());
	            }
	            else {
	                str.push(data[i]);
	                str.push(JSON.stringify(data[i]));
	            }
	        }
	        debug(data);
	        throw new Error(str.join(', '));
	    };
	    return Helpers;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = Helpers;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var pool_1 = __webpack_require__(11);
	var debg = __webpack_require__(5);
	var debug = debg('simple-url-cache-REDIS');
	var es6_promise_1 = __webpack_require__(4);
	var Helpers_1 = __webpack_require__(9);
	var RedisStorageInstance = (function () {
	    function RedisStorageInstance(domain, instanceName, config, rules) {
	        this.domain = domain;
	        this.instanceName = instanceName;
	        this.config = config;
	        this.rules = rules;
	        Helpers_1.default.CheckType(domain, 'string');
	        Helpers_1.default.CheckType(instanceName, 'string');
	        this._conn = new pool_1.RedisPool(config);
	        this.hashKey = 'simple-url-cache:' + this.instanceName;
	        this.domainHashKey = this.domain + ':' + this.instanceName;
	    }
	    RedisStorageInstance.prototype.getKey = function (key) {
	        return this.domainHashKey + ':' + key;
	    };
	    RedisStorageInstance.prototype.getCacheRules = function () {
	        return this.rules;
	    };
	    RedisStorageInstance.prototype.clearAllCache = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var client = _this._conn.getConnection();
	            debug('Clear all cache called');
	            client.hdel(_this.hashKey, _this.domain, function (err) {
	                if (err)
	                    reject(err);
	                client.hkeys(_this.domainHashKey, function (err, keys) {
	                    debug('getting keys for ', _this.domainHashKey, keys);
	                    var nb = 0;
	                    if (keys.length === 0) {
	                        resolve(true);
	                    }
	                    keys.forEach(function (key) {
	                        debug('Deleting key ', _this.getKey(key));
	                        client.del(_this.getKey(key), function (err) {
	                            if (err)
	                                reject(err);
	                            debug('deleting hash key for ', _this.domainHashKey, key);
	                            client.hdel(_this.domainHashKey, key, function (err) {
	                                if (err)
	                                    reject(err);
	                                if (++nb === keys.length) {
	                                    resolve(true);
	                                }
	                            });
	                        });
	                    });
	                });
	            });
	        });
	    };
	    RedisStorageInstance.prototype.getAllCachedDomains = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            debug('getAllCachedDomains called');
	            _this._conn.getConnection().hkeys(_this.hashKey, function (err, results) {
	                if (err)
	                    reject(err);
	                debug('hkeys() ', _this.hashKey, results);
	                resolve(results);
	            });
	        });
	    };
	    RedisStorageInstance.prototype.getCachedURLs = function () {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var client = _this._conn.getConnection();
	            var urls = [];
	            client.hkeys(_this.domainHashKey, function (err, results) {
	                if (err)
	                    reject(err);
	                var nb = 0;
	                if (results.length === 0) {
	                    resolve([]);
	                }
	                results.forEach(function (url) {
	                    client.get(_this.getKey(url), function (err, data) {
	                        if (err)
	                            reject(err);
	                        if (data !== null) {
	                            urls.push(url);
	                            nb++;
	                            if (nb === results.length) {
	                                resolve(urls);
	                            }
	                        }
	                        else {
	                            client.hdel(_this.domainHashKey, url, function (err) {
	                                if (err)
	                                    reject(err);
	                                nb++;
	                                if (nb === results.length) {
	                                    resolve(urls);
	                                }
	                            });
	                        }
	                    });
	                });
	            });
	        });
	    };
	    RedisStorageInstance.prototype.delete = function (key) {
	        var _this = this;
	        debug('removing url cache: ', key);
	        var client = this._conn.getConnection();
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            debug('Deleting KEY ', _this.getKey(key));
	            client.del(_this.getKey(key), function (err) {
	                if (err) {
	                    debug('REDIS ERROR, ', err);
	                    reject(err);
	                }
	                debug('DELETING HASH ', _this.domainHashKey);
	                client.hdel(_this.domainHashKey, key, function (err) {
	                    if (err) {
	                        debug('REDIS ERROR', err);
	                        reject(err);
	                    }
	                    resolve(true);
	                });
	            });
	        });
	    };
	    RedisStorageInstance.prototype.get = function (key) {
	        var _this = this;
	        debug('Retrieving url cache: ', key);
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var client = _this._conn.getConnection();
	            client.hget(_this.domainHashKey, key, function (err, content) {
	                if (err)
	                    reject(err);
	                if (content === null) {
	                    reject(null);
	                }
	                client.get(_this.getKey(key), function (err, timestamp) {
	                    if (err)
	                        reject(err);
	                    if (timestamp === null) {
	                        client.hdel(_this.domainHashKey, _this.getKey(key), function (err) {
	                            if (err)
	                                reject(err);
	                            reject(null);
	                        });
	                    }
	                    else {
	                        resolve(content);
	                    }
	                });
	            });
	        });
	    };
	    RedisStorageInstance.prototype.has = function (key) {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var client = _this._conn.getConnection();
	            client.get(_this.getKey(key), function (err, data) {
	                if (err) {
	                    debug('Error while querying is cached on redis: ', key, err);
	                    reject(err);
	                }
	                else {
	                    var isCached = data !== null;
	                    debug('HAS, key ', _this.getKey(key), 'is cached? ', isCached);
	                    if (!isCached) {
	                        client.hdel(_this.domainHashKey, key, function (err) {
	                            debug('hdel executed', _this.domainHashKey, key);
	                            if (err) {
	                                reject(err);
	                            }
	                            resolve(false);
	                        });
	                    }
	                    else {
	                        resolve(true);
	                    }
	                }
	            });
	        });
	    };
	    RedisStorageInstance.prototype.set = function (key, value, ttl) {
	        var _this = this;
	        return new es6_promise_1.Promise(function (resolve, reject) {
	            var client = _this._conn.getConnection();
	            client.hset(_this.hashKey, _this.domain, _this.domain, function (err, result) {
	                if (err) {
	                    reject(err);
	                }
	                else {
	                    client.hset(_this.domainHashKey, key, value, function (err, exists) {
	                        if (err) {
	                            reject(err);
	                        }
	                        if (exists === 0) {
	                            debug('Already set ');
	                            resolve(true);
	                            return;
	                        }
	                        else {
	                            client.get(_this.getKey(key), function (err, result) {
	                                if (err) {
	                                    reject(err);
	                                    return;
	                                }
	                                if (result === null) {
	                                    debug('REDIS timestamp not set');
	                                    client.set(_this.getKey(key), Date.now(), function (err) {
	                                        if (err) {
	                                            reject(err);
	                                            return;
	                                        }
	                                        if (ttl > 0) {
	                                            client.expire(_this.getKey(key), ttl, function (err) {
	                                                if (err)
	                                                    reject(err);
	                                                resolve(true);
	                                            });
	                                        }
	                                        else {
	                                            resolve(true);
	                                        }
	                                    });
	                                }
	                                else {
	                                    if (ttl > 0) {
	                                        client.expire(_this.getKey(key), ttl, function (err) {
	                                            if (err)
	                                                reject(err);
	                                            resolve(true);
	                                        });
	                                    }
	                                    else {
	                                        resolve(true);
	                                    }
	                                }
	                            });
	                        }
	                    });
	                }
	            });
	        });
	    };
	    RedisStorageInstance.prototype.destroy = function () {
	        this._conn.kill();
	    };
	    return RedisStorageInstance;
	}());
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = RedisStorageInstance;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var redis = __webpack_require__(12);
	var dbug = __webpack_require__(5);
	var debug = dbug('simple-url-cache-REDIS');
	var RedisPool = (function () {
	    function RedisPool(config) {
	        RedisPool.connect(config);
	        this.db = config.db;
	    }
	    RedisPool.connect = function (config) {
	        if (typeof RedisPool._pool[config.db] === 'undefined' || RedisPool._pool[config.db] === null || !RedisPool._isOnline[config.db]) {
	            debug('This redis connection has never been instanciated before', config.db);
	            RedisPool._isOnline[config.db] = false;
	            RedisPool._pool[config.db] = redis.createClient(config);
	            RedisPool._pool[config.db].on('connect', function () {
	                RedisPool._isOnline[config.db] = true;
	                debug('redis connected');
	            });
	            RedisPool._pool[config.db].on('error', function (e) {
	                debug(e);
	                RedisPool._isOnline[config.db] = false;
	                RedisPool._pool[config.db] = null;
	                throw new Error(e);
	            });
	            RedisPool._pool[config.db].on('end', function () {
	                RedisPool._pool[config.db] = null;
	                RedisPool._isOnline[config.db] = false;
	                debug('Connection closed');
	            });
	            RedisPool._pool[config.db].on('warning', function (msg) {
	                debug('Warning called: ', msg);
	            });
	        }
	        return RedisPool._pool[config.db];
	    };
	    RedisPool.isOnline = function (db) {
	        return RedisPool._isOnline[db];
	    };
	    RedisPool.kill = function (db) {
	        if (RedisPool._isOnline[db] === true) {
	            RedisPool._pool[db].end();
	        }
	    };
	    RedisPool.prototype.getConnection = function () {
	        return RedisPool._pool[this.db];
	    };
	    RedisPool.prototype.isOnline = function () {
	        return RedisPool._isOnline[this.db];
	    };
	    RedisPool.prototype.kill = function () {
	        if (RedisPool._isOnline[this.db] === true) {
	            RedisPool._pool[this.db].end();
	        }
	    };
	    RedisPool._pool = {};
	    RedisPool._isOnline = {};
	    return RedisPool;
	}());
	exports.RedisPool = RedisPool;


/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = require("redis");

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = require("url");

/***/ }
/******/ ]);
//# sourceMappingURL=simple-cache.min.js.map