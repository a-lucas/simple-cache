{"version":3,"sources":["webpack:///webpack/bootstrap a55df0eea79c79187bc2","webpack:///./ts/cacheEngine.ts","webpack:///./ts/fileStorage.ts","webpack:///./ts/abstract.ts","webpack:///external \"path\"","webpack:///external \"fs\"","webpack:///external \"shelljs\"","webpack:///external \"es6-promise\"","webpack:///external \"debug\"","webpack:///./ts/redisStorage.ts","webpack:///./ts/redisPool.ts","webpack:///external \"redis\""],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAkD;AAClD,mDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA,+BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;;;;;;;ACnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC1CA,kC;;;;;;ACAA,gC;;;;;;ACAA,qC;;;;;;ACAA,yC;;;;;;ACAA,mC;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,sBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,8BAA6B;AAC7B;AACA,sBAAqB;AACrB;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA8C,cAAc;AAC5D;;;;;;;ACrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC,0DAA0D;;;;;;;ACzC3D,mC","file":"dist/simple-cache.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap a55df0eea79c79187bc2\n **/","\"use strict\";\nconst fileStorage_1 = require('./fileStorage');\nconst redisStorage_1 = require('./redisStorage');\nclass CacheEngine {\n    constructor(storageConfig, cacheRules) {\n        this.storageConfig = storageConfig;\n        this.cacheRules = cacheRules;\n    }\n    url(url) {\n        switch (this.storageConfig.type) {\n            case 'file':\n                return new fileStorage_1.default(url, this.storageConfig, this.cacheRules);\n            case 'redis':\n                return new redisStorage_1.default(url, this.storageConfig, this.cacheRules);\n            default:\n                throw new Error('Unknown Storage config type value. Only file|redis allowed');\n        }\n    }\n}\nexports.CacheEngine = CacheEngine;\n;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./ts/cacheEngine.ts\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\nconst abstract_1 = require('./abstract');\nconst path = require('path');\nconst fs = require('fs');\nconst shell = require('shelljs');\nconst es6_promise_1 = require('es6-promise');\nconst dbug = require('debug');\nlet debug = dbug('simple-url-cache-FS');\nes6_promise_1.polyfill();\nclass FileStorage extends abstract_1.CacheCategory {\n    constructor(_url, _storageConfig, _regexRules) {\n        super(_url, _regexRules);\n        this._url = _url;\n        this._storageConfig = _storageConfig;\n        this._regexRules = _regexRules;\n        this.escape = () => {\n            let escaped = this._url.replace(':', '%3A');\n            escaped = escaped.replace('.', '%2E'); //http://stackoverflow.com/questions/3856693/a-url-resource-that-is-a-dot-2e\n            escaped = escaped.replace('~', '%7E'); //http://www.w3schools.com/tags/ref_urlencode.asp\n            escaped = encodeURIComponent(escaped);\n            return escaped;\n        };\n        this.validate = (str) => {\n            if (str.length === 0) {\n                return false;\n            }\n            if (str.length > 255) {\n                return false;\n            }\n            if (typeof str === 'undefined') {\n                return false;\n            }\n            return true;\n        };\n        this.isCached = () => {\n            return new Promise((resolve, reject) => {\n                if (fs.existsSync(this._currentFilePath)) {\n                    if (this._currentCategory === 'maxAge') {\n                        var stats = fs.statSync(this._currentFilePath);\n                        var nowTimestamp = new Date().getTime();\n                        var modificationTime = stats.mtime.getTime();\n                        var expiration = modificationTime + this._currentMaxAge * 1000;\n                        var diff = (nowTimestamp - expiration);\n                        this.diff = diff;\n                        if (diff > 0) {\n                            //the file is expired, remove it, then return false;\n                            this.removeUrl();\n                            debug('This url is expired.... removing the cache. ', this._url);\n                            resolve(false);\n                        }\n                        else {\n                            debug('This url is cached.', this._url);\n                            resolve(true);\n                        }\n                    }\n                    debug('This url is cached ', this._url);\n                    resolve(true);\n                }\n                else {\n                    debug('This url is not cached ', this._url);\n                    resolve(false);\n                }\n            });\n        };\n        this.removeUrl = () => {\n            debug('removing url cache: ', this._url);\n            return new Promise((resolve, reject) => {\n                try {\n                    fs.unlinkSync(this._currentFilePath);\n                    resolve(true);\n                }\n                catch (e) {\n                    debug('Error while removing url: ', this._url, e);\n                    reject(false);\n                }\n            });\n        };\n        this.getUrl = () => {\n            debug('Retrieving url cache: ', this._url);\n            return new Promise((resolve, reject) => {\n                this.isCached().then((isCached) => {\n                    if (!isCached) {\n                        reject('This url is not cached: ' + this._url);\n                    }\n                    else {\n                        resolve(fs.readFileSync(this._currentFilePath, 'utf8'));\n                    }\n                });\n            });\n        };\n        this.cache = (html, force) => {\n            debug('Caching url ', this._url);\n            return new Promise((resolve, reject) => {\n                if (!this._validFile) {\n                    debug('FILE -> ' + 'invalid REJECTED', this._url);\n                    reject('invalid URL');\n                    return;\n                }\n                else {\n                    if (force === true) {\n                        fs.writeFile(this._currentFilePath, html, 'utf8', (err) => {\n                            if (err) {\n                                debug('Error while writing cache.', this._url, err);\n                                reject('invalid URL');\n                            }\n                            else {\n                                debug('URL cached sucessfully: ', this._url);\n                                resolve(true);\n                            }\n                        });\n                        return;\n                    }\n                    this.isCached().then((isCached) => {\n                        if (isCached) {\n                            resolve(false);\n                        }\n                        else {\n                            if (this._currentCategory === 'never') {\n                                debug('Won\\'t cache the url - category is never.', this._url);\n                                resolve(false);\n                                return;\n                            }\n                            fs.writeFile(this._currentFilePath, html, 'utf8', (err) => {\n                                if (err) {\n                                    debug('Error while writing cache.', this._url, err);\n                                    reject('invalid URL');\n                                }\n                                else {\n                                    debug('URL cached sucessfully: ', this._url);\n                                    resolve(true);\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        };\n        this.destroy = () => { };\n        shell.mkdir('-p', this._storageConfig.dir);\n        let escaped = this.escape();\n        this._validFile = this.validate(escaped);\n        this._currentFilePath = path.join(this._storageConfig.dir, escaped);\n        debug('FileStorage instanciated with url: ' + this._url);\n        debug('_currentFilePath = ', this._currentFilePath);\n    }\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = FileStorage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./ts/fileStorage.ts\n ** module id = 1\n ** module chunks = 0\n **/","\"use strict\";\nclass CacheCategory {\n    constructor(currentUrl, _config) {\n        this.currentUrl = currentUrl;\n        this._config = _config;\n        this.getRegexTest = (u) => {\n            return u.regex.test(this.currentUrl);\n        };\n        //return always|never|maxAge|timestamp|default\n        this.getCacheCategory = () => {\n            var i;\n            for (i in this._config.cacheNever) {\n                if (this.getRegexTest(this._config.cacheNever[i]) === true) {\n                    this._currentCategory = 'never';\n                    return;\n                }\n            }\n            for (i in this._config.cacheAlways) {\n                if (this.getRegexTest(this._config.cacheAlways[i]) === true) {\n                    this._currentCategory = 'always';\n                    return;\n                }\n            }\n            for (i in this._config.cacheMaxAge) {\n                if (this.getRegexTest(this._config.cacheMaxAge[i]) === true) {\n                    this._currentCategory = 'maxAge';\n                    this._currentMaxAge = this._config.cacheMaxAge[i].maxAge;\n                    return;\n                }\n            }\n            this._currentCategory = this._config.default;\n            return;\n        };\n        this.getCacheCategory();\n    }\n    getCategory() {\n        return this._currentCategory;\n    }\n    getCurrentUrl() {\n        return this.currentUrl;\n    }\n}\nexports.CacheCategory = CacheCategory;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./ts/abstract.ts\n ** module id = 2\n ** module chunks = 0\n **/","module.exports = require(\"path\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"path\"\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = require(\"fs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"fs\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = require(\"shelljs\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"shelljs\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = require(\"es6-promise\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"es6-promise\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = require(\"debug\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"debug\"\n ** module id = 7\n ** module chunks = 0\n **/","\"use strict\";\nconst abstract_1 = require('./abstract');\nconst es6_promise_1 = require('es6-promise');\nconst dbug = require('debug');\nconst redisPool_1 = require('./redisPool');\nes6_promise_1.polyfill();\nlet debug = dbug('simple-url-cache-REDIS');\nclass RedisStorage extends abstract_1.CacheCategory {\n    constructor(_url, _storageConfig, _regexRules) {\n        super(_url, _regexRules);\n        this._url = _url;\n        this._storageConfig = _storageConfig;\n        this._regexRules = _regexRules;\n        this.isRedisOnline = () => {\n            return redisPool_1.RedisPool.isOnline();\n        };\n        this.isCached = () => {\n            return new Promise((resolve, reject) => {\n                this._conn.get(this._url, (err, data) => {\n                    if (err) {\n                        debug('Error while querying is cached on redis: ', this._url, err);\n                        reject(err);\n                    }\n                    else {\n                        let isCached = data !== null;\n                        resolve(isCached);\n                    }\n                });\n            });\n        };\n        this.removeUrl = () => {\n            debug('removing url cache: ', this._url);\n            return new Promise((resolve, reject) => {\n                this._conn.del(this._url, (err, data) => {\n                    if (err) {\n                        debug('Error while removing url: ', this._url, err);\n                        reject(err);\n                    }\n                    resolve(true);\n                });\n            });\n        };\n        this.getUrl = () => {\n            debug('Retrieving url cache: ', this._url);\n            return new Promise((resolve, reject) => {\n                this._conn.get(this._url, (err, data) => {\n                    if (err) {\n                        debug('Error while retrieving url: ', this._url, err);\n                        reject(err);\n                    }\n                    if (data === null) {\n                        debug('This url is not cached - and can\\'t be retrieved: ', this._url);\n                        reject('This url is not cached: ' + this._url);\n                    }\n                    else {\n                        resolve(data);\n                    }\n                });\n            });\n        };\n        this.cache = (html, force) => {\n            debug('Caching url ', this._url);\n            return new Promise((resolve, reject) => {\n                if (force === true) {\n                    this._conn.set(this._url, html, (err, result) => {\n                        if (err) {\n                            debug('Error while storing url in redis: ', this._url, err);\n                            reject(err);\n                        }\n                        if (this._currentCategory === 'maxAge') {\n                            this._conn.expire(this._url, this._currentMaxAge, (err) => {\n                                if (err) {\n                                    debug('Error while setting ttl in redis: ', this._url, err);\n                                    reject(err);\n                                }\n                                else {\n                                    debug('URL cached successfully with ttl = ', this._currentMaxAge, this._url);\n                                    resolve(true);\n                                }\n                            });\n                        }\n                        else {\n                            debug('URL cached sucessfully: ', this._url);\n                            resolve(true);\n                        }\n                    });\n                }\n                else {\n                    this.isCached().then((isCached) => {\n                        if (isCached === true) {\n                            debug('This url is already cached - not storing it: ', this._url);\n                            resolve(false);\n                        }\n                        else if (this._currentCategory === 'never') {\n                            debug('Won\\'t cache the url - category is never.', this._url);\n                            resolve(false);\n                        }\n                        else {\n                            this._conn.set(this._url, html, (err, result) => {\n                                if (err) {\n                                    debug('Error while storing url in redis: ', this._url, err);\n                                    reject(err);\n                                }\n                                if (this._currentCategory === 'maxAge') {\n                                    this._conn.expire(this._url, this._currentMaxAge, (err) => {\n                                        if (err) {\n                                            debug('Error while setting ttl in redis: ', this._url, err);\n                                            reject(err);\n                                        }\n                                        else {\n                                            debug('URL cached successfully with ttl = ', this._currentMaxAge, this._url);\n                                            resolve(true);\n                                        }\n                                    });\n                                }\n                                else {\n                                    debug('URL cached sucessfully: ', this._url);\n                                    resolve(true);\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n        };\n        this.destroy = () => {\n            redisPool_1.RedisPool.kill();\n        };\n        this._conn = redisPool_1.RedisPool.connect(this._storageConfig);\n    }\n}\nRedisStorage._redisPool = redisPool_1.RedisPool;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = RedisStorage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./ts/redisStorage.ts\n ** module id = 8\n ** module chunks = 0\n **/","\"use strict\";\nconst redis = require('redis');\nconst dbug = require('debug');\nlet debug = dbug('simple-url-cache-REDIS');\nlet pool = null;\nvar RedisPool;\n(function (RedisPool) {\n    let _isOnline = false;\n    RedisPool.connect = (config) => {\n        if (pool === null) {\n            debug('This redis connection has never been instanciated before');\n            pool = redis.createClient(config);\n            pool.on('connect', () => {\n                _isOnline = true;\n                console.log('redis connected');\n            });\n            pool.on('error', (e) => {\n                console.error(e);\n                _isOnline = true;\n                pool = null;\n                throw new Error(e);\n            });\n            pool.on('end', () => {\n                pool = null;\n                _isOnline = false;\n                console.error('Connection closed');\n            });\n            pool.on('warning', (msg) => {\n                console.error('Warning called: ', msg);\n            });\n        }\n        return pool;\n    };\n    RedisPool.isOnline = () => {\n        return pool !== null && _isOnline === true;\n    };\n    RedisPool.kill = () => {\n        if (_isOnline === true) {\n            pool.end();\n        }\n    };\n})(RedisPool = exports.RedisPool || (exports.RedisPool = {}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./ts/redisPool.ts\n ** module id = 9\n ** module chunks = 0\n **/","module.exports = require(\"redis\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"redis\"\n ** module id = 10\n ** module chunks = 0\n **/"],"sourceRoot":""}